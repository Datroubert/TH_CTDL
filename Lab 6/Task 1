package Lab6;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

public class MyArrayList<E> {
	public static final int DEFAULT_CAPACITY = 10;
	private E[] elements;
	private int size;
	
	public MyArrayList() {
	this.elements = (E[]) new Object[DEFAULT_CAPACITY];
	}
	
	public MyArrayList(int capacity) {
	this.elements = (E[]) new Object[capacity];
	}
	
	// creates an array of double-size if the array of
	// elements is full
	public void growSize() {
		int newCapacity = elements.length * 2;
		E[] newElements = (E[]) new Object[newCapacity];
		for (int i = 0; i < size; i++) {
			newElements[i] = elements[i];
		}
		elements = newElements;
	}
	
	// Returns the number of elements in this list.
	public int size() {
	return this.size;
	}
	
	// Returns whether the list is empty.
	public boolean isEmpty() {
	return this.size == 0;
	}
	
	// Returns (but does not remove) the element at index i.
	public E get(int i) throws IndexOutOfBoundsException 
	{
		if(i<0 || i>= size) {
			throw new ArrayIndexOutOfBoundsException();
		} 
			else {
				return elements[i];
		}
	
	}
	
	// Replaces the element at index i with e, and 
	// returns the replaced element. âˆ—/
	public E set(int i, E e) throws IndexOutOfBoundsException {
		if (i<0 || i >= this.size) {
			throw new IndexOutOfBoundsException();
		}
		else {
			elements[i] = e;
			return elements[i];
		}
	}
	
	// It is used to append the specified element at the 
	//end of a list.
	public boolean add(E e) {
		if (this.size == this.elements.length) {
			this.growSize();
		}
		else {
			this.elements[this.size] = e;
			size ++;
		}
	return true;
	}
	
	// Inserts element e to be at index i, shifting all 
	// subsequent elements later.
	public void add(int i, E e) throws IndexOutOfBoundsException {
		if(i<0 || i>= size) {
			throw new IndexOutOfBoundsException();
		}
		if (size == elements.length) {
			growSize();
			
		} 
		else {
			for (int j = i; j < size; j++) {
				elements[j+i] = elements[j];
			}
			elements[i] = e;
			size++;
			
		}
	}
	
	// Removes and returns the element at index i, 
	// shifting subsequent elements earlier.
	public E remove(int i) throws IndexOutOfBoundsException {
	if (i <0 || i >= size) {
		throw new IndexOutOfBoundsException();
		}
	else {
		E temp = elements[i];
		for (int j = i; j < size-1; j++) {
			elements[j] = elements[j+1];
			
		}
		elements[size-1] = null;
		size--;
		return temp;
	}
	}
	
	// It is used to clear all elements in the list.
	public void clear() {
		this.size = 0;
		
	}
	
	// It is used to return the index in this list of the 
	// last occurrence of the specified element, or -1 if the 
	// list does not contain this element.
	public int lastIndexOf(Object o) {
		for (int i = size-1; i>=0; i--) {
			if(elements[i].equals(o)) {
				return i;
			}
		}
	return -1;
	}
	
	// It is used to return an array containing all of the 
	// elements in this list in the correct order.
	public E[] toArray() {
		E[] newElements = (E[]) new Object[size];
		for(int i = 0; i < size; i++) {
			newElements[i] = elements[i];
			
		}
		return newElements;
		}
	
		// It is used to return a shallow copy of an ArrayList.
		public MyArrayList<E> clone() {
		return null;
		}
		
		// It returns true if the list contains the specified 
		// element
		public boolean contains(E o) {
			for (int i = 0; i < size; i++) {
				if (elements[i].equals(o)) {
					return true;
				}
			}
			return false;
		}
		
		// It is used to return the index in this list of the 
		// first occurrence of the specified element, or -1 if the 
		// List does not contain this element.
		public int indexOf(E o) {
			for (int i = 0; i < size; i++) {
				if (elements[i].equals(o)) {
					return i;
				}
			}
			return -1;
		}
		
		// It is used to remove the first occurrence of the 
		// specified element.
		public boolean remove(E e) {
			int index =indexOf(e);
			if(index!=-1) {
				remove(index);
				return true;
			}
			return false;
		}
		
		// It is used to sort the elements of the list on the 
		/// basis of specified comparator.
		public void sort(Comparator<E> c) {
			for (int i = 0; i < size - 1; i++) {
				int min = i;
				for (int j = i; j < size; j++) {
					if (c.compare(elements[j], elements[min]) < 0) {
						min = j;
					}
				}
				E temp = elements[i];
				elements[i] = elements[min];
				elements[min] = temp;
			}
		}
		public static void main(String[] args) {
			ArrayList<Integer> arrList = new ArrayList<Integer>();
			arrList.add(1);
			arrList.add(2);
			arrList.add(2);
			arrList.set(2, 3);
			Comparator<Integer> ascending = (a,b) -> a-b;
			System.out.println(arrList.size());
			System.out.println(arrList.add(3));
		
			List<Integer> col = new LinkedList<Integer>();
			col.add(1);
			col.add(2);
			col.add(3);
			col.add(3);
			col.add(2);
			col.add(1);
			arrList.addAll(col);
			for (int i = 0; i < arrList.size(); i++) {
				System.out.println(arrList.get(i));
			
			}
		}

}
